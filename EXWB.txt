`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 05/08/2019 05:53:12 PM
// Design Name: 
// Module Name: EXWB
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module EXWB(clock, N, Z, regwrt, MemtoReg, PCtoReg, BranchN, BranchZ, jump, jumpmem, alu, datamem, rd, adder, N_out, Z_out, regwrt_out, MemtoReg_out, PCtoReg_out, BranchN_out, BranchZ_out, jump_out, jumpmem_out, alu_out, datamem_out, rd_out, adder_out);
//inputs
input clock;
input N;
input Z;
input regwrt;
input MemtoReg;
input PCtoReg;
input BranchN;
input BranchZ;
input jump;
input jumpmem;

input [31:0] alu;
input [31:0] datamem;
input [5:0] rd;
input [31:0] adder;

//outputs
output reg N_out;
output reg Z_out;
output reg regwrt_out;
output reg MemtoReg_out;
output reg PCtoReg_out;
output reg BranchN_out;
output reg BranchZ_out;
output reg jump_out;
output reg jumpmem_out;

output reg [31:0] alu_out;
output reg [31:0] datamem_out;
output reg [5:0] rd_out;
output reg [31:0] adder_out;

always@ (posedge clock)
begin //assigning the inputs to the outputs
    N_out = N;
    Z_out = Z;
    regwrt_out = regwrt;
    MemtoReg_out = MemtoReg;
    PCtoReg_out = PCtoReg;
    BranchN_out = BranchN;
    BranchZ_out = BranchZ;
    jump_out = jump;
    jumpmem_out = jumpmem;

    alu_out = alu;
    datamem_out = datamem;
    rd_out = rd;
    adder_out = adder;   
end
endmodule
